<네트워크>
 네트워크는 컴퓨터와 컴퓨터간의 연결을 의미함 >> 클라이언트(웹) ~ 서버(네트워크 통신)

 클라이언트 : 네트워크에서 정보를 요구해서 받는 쪽
 서버: 정보를 제공해주는 쪽
 
 Web 또는 App은 클라이언트 역할
 상품정보, 로그인, 이미지 등 정보를 전달해주는 역할이 서버

 브라우저 Web을 접속 >> 웹서버 >>회사의 컴퓨터에 있는 서버 컴퓨터 >> 웹(HTML,CSS,JS)를 다운
 >> 웹에서 보는 이미지 >> 파일이 있는 회사 서버에서 다운받은 결과물 
 
 웹에서 로그인 >> 인증서버와 통신
 앱에서 상품정보 불러오기 >> 상품 정보를 제공하는 API서버와 통신

 하나의 Web 서비스 또는 App 서비스를 이용하기 위해서는 다양한 서버들과 통신을 한다 >> 클라이언트가 서버와 통신
 >> 서버 컴퓨터끼리 서로 통신을 할 수 있음(웹서버,api서버,로그서버,데이터베이스 서버 등 서로 클라이언트~서버 관계를 맺는다)

 서버의 기본 구조 >> OS(운영체제)가 모든 프로그램을 관리함(브라우저, 서버프로그램 등) 
 >> 일반적으로 서버라 부르는 것은 "서버 전용 프로그램이 실행되고 있는 컴퓨터"를 의미 (웹, 상품정보, 이미지 등을 가진 서버)
 >> 서버 전용 프로그램 개발/구축은 백엔드의 역할 >> node.js 사용
 
 클라이언트 컴퓨터 > (클라이언트의) os > 웹브라우저 > 네트워크 요청 > (회사의) os > 서버프로그램 접근 > 값을 다시 클라이언트 컴퓨터에 전달

<HTTP통신>
 컴퓨터끼리 네트워크 통신 >> 이런 통신 방식들을 통신 프로토콜 이라고함 >> 메일 SMTP프로토콜, 파일 전송 FTP프로토콜 등이 있음
 >> HTTP 프로토콜은 브라우저가 웹 서버와 통신을 하기 위해 생긴 프로토콜 (웹을 이용하기 위해선 HTTP통신을 사용함)

 HTTP통신은 기본적으로 요청(request)와 응답(response)로 나눠짐
 >> 요청라인~헤더~공백~바디 로 구성됨 
 >> 요청 라인에 URL, Method같은 핵심요청정보가 있다. 
 >> Header는 HTTP관련 여러 설정 값이 들어감
 >> Body는 통신에 필요한 데이터가 들어감(옵션)

 HTTP요청 >> 어떤 서버에 요청할 것인지 URL이 있어야한다(요청라인)
 >> 어떤방식으로 통신할 것인지 Method가 있어야한다(요청라인)

 HTTP Method >> 클라이언트가 서버에게 HTTP 요청 >> URL주소와 함꼐 HTTP Method를 결정함
 >> 일반적으로 정보를 요청할 떄는 get 방식을 많이 사용
 >> post방식은 로그인이나 어떤 정보를 클라이언트에서 보낼때 사용함
 >> get방식은 서버에 데이터를 전송해야할 때, URL맨 뒤에 query를 붙임
 >> query는 key=value형태로 구성

 >> get method는 실제로 네트워크 통신 결과
 >> get 사용 예) 웹서버에서 웹사이트를 다운받을때, 이미지나 정보를 받아올때
 >> post사용 예) 새로운 자원을 생성할때, 로그인(아이디 패스워드 담아야함), 아티클을 만들떄(입력한 아티클 정보를 담아야함)
 >> post메소드의 경우 HTTP의 Body부분에 데이터를 담을 수 있음, Body는 HTTP통신에 구조적으로 데이터를 담아서 전송할수있도록함

 >> HTTP 응답규칙 >> 응답이 어떤 상태인지 나타내는 Status Code가 있어야함(요청라인) >> 요청 결과를 Body에 담아야함
 >> Status Code는 200~500번까지 있음 // 200번대 정상적 응답, 400번대 클라이언트 요청이 잘못됨, 500번대는 서버에서 에러 발생
 
 <Axios(엑시오스)>
 >> 외부 라이브러리 axios 이용해 서버 통신 >> 보통 javascript는 네트워크 통신을 하도록 돕는 fetch 함수가 있음(내장)
 >> fetch함수보다 네트워크 통신을 더 편하게 도와주는 외부 라이브러리(axios)
 >> https://github.com/axios/axios 참고

 >> 외부 라이브러리 불러오기 >> script 태그를 이용해 불러올 수 있음
 예) <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

 >> axios 이용해서 통신하기 >> script태그를 통해 라이브러리 다운받았으면 바로 사용 가능
 >> axios는 기본적으로 비동기처리를 하는 promise객체를 반환
 예)
 //axios에서 get, post사용하기
 axios.get(url주소)

 axios.post(url주소, data객체)

 //기본적으로 axios 메소드는 promise객체를 기본적으로 return함
 
 axios.get(url주소).then(function(result){ 
    //result객체는 status, data등 다양한 코드가 들어감
 }).catch(function(error){
    //에러 발생시 실행로직
 })

