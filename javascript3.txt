<Javascript 심화1>
<콜백 함수>
 //함수는 매개변수(parameter)를 넣을 수 있고, 값을 반환 할 수 있다
 함수가 나중에 불린다고 해서 CallBack 이다. 일반적으로 콜백 함수를 구현할 때, 함수의 인자에 함수를 넣는 방식을 사용한다

 예)
 function sayHello(){ //함수sayHello
    console.log('I am grab');
 }

 function getHuman(callbackFunc){//getHuman함수의 매개변수에 또 다른 함수가 들어간다
    callbackFunc(); // 매개변수 callbackFunC가 함수이므로 실행할 수 있다
 }

 //getHuman의 파라미터인 callbackFunc의 자리에 sayHello함수가 들어가고 sayHello가 실행된다
 //getHuman()의 인자로 함수외 형태로 들어가면 오류가 난다
 getHuman(sayHello) // "I am grab"이 출력된다
 
 콜백함수를 사용할떄, 함수로 정의된 변수를 넣지 않고 바로 함수를 넣을수도 있다.
 예)
 //이것을 "익명 함수"라 부르고, 함수의 이름을 붙여서 선언하지 않고 1회용으로 사용되는 함수를 만듦
 getHuman(function(){
    consolo.log('나는 그랩이다')
 })

 ※ javascript에서 기본으로 제공해주는 많은 함수와 라이브러리들이 콜백 함수를 사용한다
 ※ 콜백 함수에는 보통 인자를 넣어서 사용함 아래는 예시임
 //콜백에 사용될 함수 callbackFunc와 sayHello
 function callbackFunc(name){ //매개변수로 name을 받아서 출력하는 함수
    console.log(name);
 }
 
 function sayHello(callback){ //콜백함수가 매개변수 callback자리로 나중에 들어가게됨
    var text='hello';
    callback(text); //callbackFunc 실행 >> 변수 text가 대입되서 실행함
 }

 sayHello(callbackFunc); // 출력 "hello"
 sayHello(function(value){ // 위 코드와 비슷하게 value에 hello가 들어감
    console.log(value)
 })

<Javascript 심화2>
<비동기 처리>

 비동기 개념 >> 브라우저 내부에 탑재된 Code Interpreter(인터프리터)는 javascript코드를 읽고 순차적으로 실행시킴
 >> 비동기 처리가 적용된 코드는 실행될때, 아래와 같은 코드를 실행함 이 코드의 결과를 얻게 된 뒤, 인터프리터가 중간의 비동기처리의 결과를 수행하게됨
 //비동기 처리 예)
 setTimeout(function(){
    console.log('3초 뒤에 실행!');
 }, 3000)
 console.log('실행');  // 출력 결과 '실행' 출력 후 3초뒤 "3초 뒤에 실행!" 문구나옴

 동기 방식 >> 코드가 다 실행될 때까지 다른 코드로 넘어가지 않는 걸 의미함

 자바스크립트에서 비동기 처리 >> 내장되어 있는 Promis 객체를 사용함 >>  객체가 정상적으로 실행이 끝난 후 실행되는 then함수와 에러가 났을 때 실행되는 catch함수를 가지고 있음
 >> 대표적으로 사용되는 Promise 객체로 fetch 함수가 있다(fetch는 네트워크 통신 함수)

 예)
 //fetch 함수를 실행하면 Promise 객체를 반환함
 var result=fetch('https://jsonplaceholder.typicode.com/todos/1')
 //result에는 Promise 객체가 들어있음

 console.log('네트워크 통신이 끝날 때 까지 기다리지 않고 바로 실행됨1');
 
 result.then(function(response){ //인자가 있는 익명함수 넣음, 응답을 받았을때 then이 수행되고 에러가 발생시 catch함수부분이 실행됨
    console.log('이 코드는 네트워크 통신이 끝나고 나서 실행됨: ',response);
 }).catch(function(error){ //에러가 발생했을 때 실행되는 함수
    console.log('이 코드는 에러가 났을 때 실행됨: ',error);
 })

 console.log('네트워크 통신이 끝날 때 까지 기다리지 않고 바로 실행됨2');